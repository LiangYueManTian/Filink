<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fiberhome.filink.userserver.dao.TempauthDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.fiberhome.filink.userserver.bean.TempAuth">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="userId" property="userId"/>
        <result column="applyReason" property="applyReason"/>
        <result column="authUserId" property="authUserId"/>
        <result column="applyTime" property="applyTime"/>
        <result column="authEffectiveTime" property="authEffectiveTime"/>
        <result column="authExpirationTime" property="authExpirationTime"/>
        <result column="authStatus" property="authStatus"/>
        <result column="remark" property="remark"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="createUser" property="createUser"/>
        <result column="applyStatus" property="applyStatus"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="auditingTime" property="auditingTime"/>
        <result column="auditingDesc" property="auditingDesc"/>

        <association property="user" column="userId" javaType="com.fiberhome.filink.userserver.bean.User">
            <id column="userId" property="id"/>
            <result column="userName" property="userName"/>
        </association>

        <association property="authUser" column="authUserId" javaType="com.fiberhome.filink.userserver.bean.User">
            <id column="authUserId" property="id"/>
            <result column="authUserName" property="userName"/>
        </association>

        <collection property="authDeviceList" ofType="com.fiberhome.filink.userserver.bean.AuthDevice"
                    javaType="java.util.ArrayList">
            <id column="auId" property="id"/>
            <result column="authDeviceId" property="deviceId"/>
            <result column="authDeviceDoorId" property="doorId"/>
            <result column="authDeviceTwoBarCode" property="qrCode"/>
        </collection>

    </resultMap>

    <sql id="tempauthInfo">
        tempauth.id,tempauth.name,tempauth.userId,tempauth.applyReason,tempauth.authUserId,
        tempauth.applyTime,tempauth.authEffectiveTime,tempauth.authExpirationTime,tempauth.authStatus,
        tempauth.remark,tempauth.createTime,tempauth.updateTime,tempauth.createUser,tempauth.applyStatus,
        tempauth.is_deleted,tempauth.auditingTime,tempauth.auditingDesc
    </sql>

    <select id="queryTempAuthByCondition" parameterType="com.fiberhome.filink.userserver.bean.TempAuthParameter"
            resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>,user.id as userId,user.user_name as userName,authuser.id as authUserId,
        authuser.user_name as authUserName
        FROM
        tempauth as tempauth
        LEFT JOIN `user` as user ON tempauth.userId = `user`.id
        LEFT JOIN `user` as authuser ON tempauth.authUserId = authuser.id
        LEFT JOIN auth_device as authDevice ON tempauth.id = authDevice.authId
        <where>
            tempauth.is_deleted = 0
            <if test="name != null">
                AND tempauth.name LIKE concat('%',#{name},'%')
            </if>
            <if test="authUserName != null">
                AND authuser.user_name LIKE concat('%',#{authUserName},'%')
            </if>
            <if test="userName != null">
                AND user.user_name LIKE concat('%',#{userName},'%')
            </if>
            <if test="authStatus != null">
                AND tempauth.authStatus = #{authStatus}
            </if>
            <if test="remark != null">
                AND tempauth.remark LIKE concat('%',#{remark},'%')
            </if>
            <if test="auditingDesc!=null">
                AND tempauth.auditingDesc LIKE concat('%',#{auditingDesc},'%')
            </if>
            <if test="applyReason != null">
                AND tempauth.applyReason LIKE concat('%',#{applyReason},'%')
            </if>

            <if test="createTime != null and createTimeEnd != null">
                AND tempauth.createTime >= #{createTime}
                AND tempauth.createTime &lt;= #{createTimeEnd}
            </if>
            <if test="authEffectiveTime != null and authEffectiveTimeEnd != null">
                AND tempauth.authEffectiveTime >= #{authEffectiveTime}
                AND tempauth.authEffectiveTime &lt;= #{authEffectiveTimeEnd}
            </if>
            <if test="authExpirationTime != null and authExpirationTimeEnd != null">
                AND tempauth.authExpirationTime >= #{authExpirationTime}
                AND tempauth.authExpirationTime &lt;= #{authExpirationTimeEnd}
            </if>
            <if test="auditingTime != null and auditingTimeEnd != null">
                AND tempauth.auditingTime >= #{auditingTime}
                AND tempauth.auditingTime &lt;= #{auditingTimeEnd}
            </if>
            <if test="areaIdList != null and roleDeviceIdList != null">
                AND authDevice.areaId IN
                <foreach collection="areaIdList" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
                AND authDevice.deviceType IN
                <foreach collection="roleDeviceIdList" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        <if test="sortProperties != null and sort != null">
            <if test="sortProperties == 'name'">
                ORDER BY tempauth.name ${sort}
            </if>
            <if test="sortProperties == 'remark'">
                ORDER BY tempauth.remark ${sort}
            </if>
            <if test="sortProperties == 'authStatus'">
                ORDER BY tempauth.authStatus ${sort}
            </if>
            <if test="sortProperties == 'createTime'">
                ORDER BY tempauth.createTime ${sort}
            </if>
            <if test="sortProperties == 'authEffectiveTime'">
                ORDER BY tempauth.authEffectiveTime ${sort}
            </if>
            <if test="sortProperties == 'authExpirationTime'">
                ORDER BY tempauth.authExpirationTime ${sort}
            </if>
            <if test="sortProperties == 'userName'">
                ORDER BY user.user_name ${sort}
            </if>
            <if test="sortProperties == 'authUserName'">
                ORDER BY authuser.user_name ${sort}
            </if>
            <if test="sortProperties == 'auditingDesc'">
                ORDER BY tempauth.auditingDesc ${sort}
            </if>
        </if>
        <if test="sort == null or sortProperties == null">
            ORDER BY tempauth.createTime DESC
        </if>
        LIMIT #{startNum},#{pageSize}
    </select>

    <select id="queryTempAuthNumberByCondition" parameterType="com.fiberhome.filink.userserver.bean.TempAuthParameter"
            resultType="Long">
        SELECT
        count(tempauth.id)
        FROM
        tempauth as tempauth
        LEFT JOIN `user` as user ON tempauth.userId = `user`.id
        LEFT JOIN `user` as authuser ON tempauth.authUserId = authuser.id
        LEFT JOIN auth_device as authDevice ON tempauth.id = authDevice.authId
        <where>
            tempauth.is_deleted = 0
            <if test="name != null">
                AND tempauth.name LIKE concat('%',#{name},'%')
            </if>
            <if test="authUserName != null">
                AND authuser.user_name LIKE concat('%',#{authUserName},'%')
            </if>
            <if test="userName != null">
                AND user.user_name LIKE concat('%',#{userName},'%')
            </if>
            <if test="authStatus != null">
                AND tempauth.authStatus = #{authStatus}
            </if>
            <if test="remark != null">
                AND tempauth.remark LIKE concat('%',#{remark},'%')
            </if>
            <if test="applyReason != null">
                AND tempauth.applyReason LIKE concat('%',#{applyReason},'%')
            </if>
            <if test="createTime != null and createTimeEnd != null">
                AND tempauth.createTime >= #{createTime}
                AND tempauth.createTime &lt;= #{createTimeEnd}
            </if>
            <if test="authEffectiveTime != null and authEffectiveTimeEnd != null">
                AND tempauth.authEffectiveTime >= #{authEffectiveTime}
                AND tempauth.authEffectiveTime &lt;= #{authEffectiveTimeEnd}
            </if>
            <if test="authExpirationTime != null and authExpirationTimeEnd != null">
                AND tempauth.authExpirationTime >= #{authExpirationTime}
                AND tempauth.authExpirationTime &lt;= #{authExpirationTimeEnd}
            </if>
            <if test="auditingTime != null and auditingTimeEnd != null">
                AND tempauth.auditingTime >= #{auditingTime}
                AND tempauth.auditingTime &lt;= #{auditingTimeEnd}
            </if>
            <if test="areaIdList != null and roleDeviceIdList != null">
                AND authDevice.areaId IN
                <foreach collection="areaIdList" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
                AND authDevice.deviceType IN
                <foreach collection="roleDeviceIdList" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        <if test="sortProperties != null and sort != null">
            <if test="sortProperties == 'name'">
                ORDER BY tempauth.name ${sort}
            </if>
            <if test="sortProperties == 'remark'">
                ORDER BY tempauth.remark ${sort}
            </if>
            <if test="sortProperties == 'authStatus'">
                ORDER BY tempauth.authStatus ${sort}
            </if>
            <if test="sortProperties == 'createTime'">
                ORDER BY tempauth.createTime ${sort}
            </if>
            <if test="sortProperties == 'authEffectiveTime'">
                ORDER BY tempauth.authEffectiveTime ${sort}
            </if>
            <if test="sortProperties == 'authExpirationTime'">
                ORDER BY tempauth.authExpirationTime ${sort}
            </if>
            <if test="sortProperties == 'userName'">
                ORDER BY user.user_name ${sort}
            </if>
            <if test="sortProperties == 'authUserName'">
                ORDER BY authuser.user_name ${sort}
            </if>
            <if test="sortProperties == 'auditingDesc'">
                ORDER BY tempauth.auditingDesc ${sort}
            </if>
        </if>
        <if test="sort == null or sortProperties == null">
            ORDER BY tempauth.createTime DESC
        </if>
    </select>

    <select id="queryTempAuthById" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>,user.id as userId,user.user_name as userName,authuser.id as authUserId,
        authuser.user_name as authUserName,authDevice.deviceId authDeviceId,authDevice.doorId authDeviceDoorId,
        authDevice.qrCode authDeviceTwoBarCode
        FROM
        tempauth as tempauth
        LEFT JOIN `user` as user ON tempauth.userId = `user`.id
        LEFT JOIN `user` as authuser ON tempauth.authUserId = authuser.id
        LEFT JOIN auth_device as authDevice ON tempauth.id = authDevice.authId
        WHERE
        tempauth.is_deleted = 0
        AND tempauth.id = #{id}
    </select>

    <select id="batchQueryTempAuthByIds" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>
        FROM
        tempauth
        WHERE
        is_deleted = 0
        AND id in
        <foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <update id="modifyTempAuthStatus">
        UPDATE
          tempauth
        SET
          authStatus = #{authStatus}
          ,auditingTime = #{auditingTime}
          , auditingDesc = #{auditingDesc}
          , authUserId = #{authUserId}
        WHERE
            id = #{id}
    </update>

    <update id="batchModifyTempAuthStatus">
        UPDATE
        tempauth
        SET
        authStatus = #{tempAuth.authStatus}
        ,auditingTime = #{tempAuth.auditingTime}
        , auditingDesc = #{tempAuth.auditingDesc}
        , authUserId = #{tempAuth.authUserId}
        WHERE
        id in
        <foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <select id="batchQueryTempAuthByIdArray" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>
        FROM
        tempauth
        WHERE
        is_deleted = 0
        AND id in
        <foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <delete id="deleteTempAuthById">
        UPDATE
          tempauth
        SET is_deleted = 1
        WHERE id = #{id}
    </delete>

    <update id="batchDeleteUnifyAuth">
        UPDATE
        tempauth
        SET is_deleted = 1
        WHERE id in
        <foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <select id="queryTempAuthByUserId" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>,user.id userId,user.user_name as userName,
        authUser.id as authUserId,authUser.user_name as authUserName,
        authDevice.deviceId authDeviceId,authDevice.doorId authDeviceDoorId,
        authDevice.qrCode authDeviceTwoBarCode
        FROM
        tempauth as tempauth
        LEFT JOIN `user` as `user` ON tempauth.userId = `user`.id
        LEFT JOIN `user` as authUser ON tempauth.authUserId = authUser.id
        LEFT JOIN auth_device as authDevice ON authDevice.authId = tempauth.id
        WHERE
        tempauth.userId = #{userId}
        AND tempauth.is_deleted = 0
    </select>

    <select id="queryAuthInfoByUserIdAndDeviceAndDoor" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>,user.id userId,user.user_name as userName,
        authUser.id as authUserId,authUser.user_name as authUserName
        FROM
        tempauth as tempauth
        LEFT JOIN auth_device as authDevice ON authDevice.authId = tempauth.id
        LEFT JOIN `user` as `user` ON tempauth.userId = `user`.id
        LEFT JOIN `user` as authUser ON tempauth.authUserId = authUser.id
        WHERE
        tempauth.userId = #{userId} AND authDevice.deviceId = #{deviceId} AND authDevice.doorId = #{doorId}
        AND tempauth.authStatus = 2 AND tempauth.is_deleted = 0
        AND ((tempauth.authEffectiveTime &lt; #{currentTime} AND tempauth.authExpirationTime &gt; #{currentTime})
        OR (tempauth.authEffectiveTime is NULL AND tempauth.authExpirationTime IS NULL ))
    </select>

    <select id="queryTempAuthByDevice" resultMap="BaseResultMap">
        SELECT
        <include refid="tempauthInfo"/>,authDevice.id auId
        FROM
        tempauth as tempauth
        LEFT JOIN auth_device as authDevice ON tempauth.id = authDevice.authId
        WHERE authDevice.deviceId = #{deviceId} AND authDevice.doorId in
        <foreach collection="doorId" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>
